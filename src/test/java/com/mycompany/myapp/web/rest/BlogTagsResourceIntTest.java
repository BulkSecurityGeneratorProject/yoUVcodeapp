package com.mycompany.myapp.web.rest;

import com.mycompany.myapp.YoUVcodeApp;
import com.mycompany.myapp.domain.BlogTags;
import com.mycompany.myapp.repository.BlogTagsRepository;
import com.mycompany.myapp.repository.search.BlogTagsSearchRepository;
import com.mycompany.myapp.web.rest.dto.BlogTagsDTO;
import com.mycompany.myapp.web.rest.mapper.BlogTagsMapper;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.hamcrest.Matchers.hasItem;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.IntegrationTest;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


/**
 * Test class for the BlogTagsResource REST controller.
 *
 * @see BlogTagsResource
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = YoUVcodeApp.class)
@WebAppConfiguration
@IntegrationTest
public class BlogTagsResourceIntTest {

    private static final String
    private static final String UPDATED_TAGS = "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB";

    @Inject
    private BlogTagsRepository blogTagsRepository;

    @Inject
    private BlogTagsMapper blogTagsMapper;

    @Inject
    private BlogTagsSearchRepository blogTagsSearchRepository;

    @Inject
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Inject
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    private MockMvc restBlogTagsMockMvc;

    private BlogTags blogTags;

    @PostConstruct
    public void setup() {
        MockitoAnnotations.initMocks(this);
        BlogTagsResource blogTagsResource = new BlogTagsResource();
        ReflectionTestUtils.setField(blogTagsResource, "blogTagsSearchRepository", blogTagsSearchRepository);
        ReflectionTestUtils.setField(blogTagsResource, "blogTagsRepository", blogTagsRepository);
        ReflectionTestUtils.setField(blogTagsResource, "blogTagsMapper", blogTagsMapper);
        this.restBlogTagsMockMvc = MockMvcBuilders.standaloneSetup(blogTagsResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    @Before
    public void initTest() {
        blogTagsSearchRepository.deleteAll();
        blogTags = new BlogTags();
        blogTags.setTags(DEFAULT_TAGS);
    }

    @Test
    @Transactional
    public void createBlogTags() throws Exception {
        int databaseSizeBeforeCreate = blogTagsRepository.findAll().size();

        // Create the BlogTags
        BlogTagsDTO blogTagsDTO = blogTagsMapper.blogTagsToBlogTagsDTO(blogTags);

        restBlogTagsMockMvc.perform(post("/api/blog-tags")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(blogTagsDTO)))
                .andExpect(status().isCreated());

        // Validate the BlogTags in the database
        List<BlogTags> blogTags = blogTagsRepository.findAll();
        assertThat(blogTags).hasSize(databaseSizeBeforeCreate + 1);
        BlogTags testBlogTags = blogTags.get(blogTags.size() - 1);
        assertThat(testBlogTags.getTags()).isEqualTo(DEFAULT_TAGS);

        // Validate the BlogTags in ElasticSearch
        BlogTags blogTagsEs = blogTagsSearchRepository.findOne(testBlogTags.getId());
        assertThat(blogTagsEs).isEqualToComparingFieldByField(testBlogTags);
    }

    @Test
    @Transactional
    public void checkTagsIsRequired() throws Exception {
        int databaseSizeBeforeTest = blogTagsRepository.findAll().size();
        // set the field null
        blogTags.setTags(null);

        // Create the BlogTags, which fails.
        BlogTagsDTO blogTagsDTO = blogTagsMapper.blogTagsToBlogTagsDTO(blogTags);

        restBlogTagsMockMvc.perform(post("/api/blog-tags")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(blogTagsDTO)))
                .andExpect(status().isBadRequest());

        List<BlogTags> blogTags = blogTagsRepository.findAll();
        assertThat(blogTags).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    public void getAllBlogTags() throws Exception {
        // Initialize the database
        blogTagsRepository.saveAndFlush(blogTags);

        // Get all the blogTags
        restBlogTagsMockMvc.perform(get("/api/blog-tags?sort=id,desc"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.[*].id").value(hasItem(blogTags.getId().intValue())))
                .andExpect(jsonPath("$.[*].tags").value(hasItem(DEFAULT_TAGS.toString())));
    }

    @Test
    @Transactional
    public void getBlogTags() throws Exception {
        // Initialize the database
        blogTagsRepository.saveAndFlush(blogTags);

        // Get the blogTags
        restBlogTagsMockMvc.perform(get("/api/blog-tags/{id}", blogTags.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.id").value(blogTags.getId().intValue()))
            .andExpect(jsonPath("$.tags").value(DEFAULT_TAGS.toString()));
    }

    @Test
    @Transactional
    public void getNonExistingBlogTags() throws Exception {
        // Get the blogTags
        restBlogTagsMockMvc.perform(get("/api/blog-tags/{id}", Long.MAX_VALUE))
                .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateBlogTags() throws Exception {
        // Initialize the database
        blogTagsRepository.saveAndFlush(blogTags);
        blogTagsSearchRepository.save(blogTags);
        int databaseSizeBeforeUpdate = blogTagsRepository.findAll().size();

        // Update the blogTags
        BlogTags updatedBlogTags = new BlogTags();
        updatedBlogTags.setId(blogTags.getId());
        updatedBlogTags.setTags(UPDATED_TAGS);
        BlogTagsDTO blogTagsDTO = blogTagsMapper.blogTagsToBlogTagsDTO(updatedBlogTags);

        restBlogTagsMockMvc.perform(put("/api/blog-tags")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(blogTagsDTO)))
                .andExpect(status().isOk());

        // Validate the BlogTags in the database
        List<BlogTags> blogTags = blogTagsRepository.findAll();
        assertThat(blogTags).hasSize(databaseSizeBeforeUpdate);
        BlogTags testBlogTags = blogTags.get(blogTags.size() - 1);
        assertThat(testBlogTags.getTags()).isEqualTo(UPDATED_TAGS);

        // Validate the BlogTags in ElasticSearch
        BlogTags blogTagsEs = blogTagsSearchRepository.findOne(testBlogTags.getId());
        assertThat(blogTagsEs).isEqualToComparingFieldByField(testBlogTags);
    }

    @Test
    @Transactional
    public void deleteBlogTags() throws Exception {
        // Initialize the database
        blogTagsRepository.saveAndFlush(blogTags);
        blogTagsSearchRepository.save(blogTags);
        int databaseSizeBeforeDelete = blogTagsRepository.findAll().size();

        // Get the blogTags
        restBlogTagsMockMvc.perform(delete("/api/blog-tags/{id}", blogTags.getId())
                .accept(TestUtil.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk());

        // Validate ElasticSearch is empty
        boolean blogTagsExistsInEs = blogTagsSearchRepository.exists(blogTags.getId());
        assertThat(blogTagsExistsInEs).isFalse();

        // Validate the database is empty
        List<BlogTags> blogTags = blogTagsRepository.findAll();
        assertThat(blogTags).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void searchBlogTags() throws Exception {
        // Initialize the database
        blogTagsRepository.saveAndFlush(blogTags);
        blogTagsSearchRepository.save(blogTags);

        // Search the blogTags
        restBlogTagsMockMvc.perform(get("/api/_search/blog-tags?query=id:" + blogTags.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.[*].id").value(hasItem(blogTags.getId().intValue())))
            .andExpect(jsonPath("$.[*].tags").value(hasItem(DEFAULT_TAGS.toString())));
    }
}
